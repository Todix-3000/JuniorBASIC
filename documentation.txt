This is a short documentation about all the supported operators, functions and commands in JuniorBASIC 1.0

Operators:
    + <value>
        No operation

    - <value>
        negate the value

    <value-1> ^ <value-2>
        calculates value-1 to the power of value-2

    <value-1> * <value-2>
        multiplication

    <value-1> / <value-2>
        division

    <value-1> MOD <value-2>
        modulo operation

    <value-1> + <value-2>
        addition or string concatenation

    <value-1> - <value-2>
        substraction

    <value-1> <= <value-2>
        1 if less or equal, else 0

    <value-1> >= <value-2>
        1 if higher or equal, else 0

    <value-1> <> <value-2>
        1 if not equal, else 0

    <value-1> < <value-2>
        1 if less, else 0

    <value-1> > <value-2>
        1 if higher, else 0

    <value-1> = <value-2>
        1 if equal, else 0

    <value-1> AND <value-2>
        Binary AND

    <value-1> OR <value-2>
        Binary OR

    <value-1> XOR <value-2>
        Binary XOR

    <value-1> && <value-2>
        1 if value-1 not zero AND value-2 not zero, else 0 (logical AND)

    <value-1> || <value-2>
        1 if value-1 not zero OR value-2 not zero, else 0 (logical OR)

Functions:
    ABS(<numeric-expression>)
        returns the absolute value of the expression

    ASC(<string-expression>)
        returns the ASCII-Code value of the first character in the string

    ATN(<numeric-expression>)
        returns the arcustangens-value of the expression

    CHR$(<numeric-expression>)
        returns the character with the given ASCII-Code value

    COS(<numeric-expression>)
        returns the cossinus-value of the expression

    EXP(<numeric-expression>)
       returns the value of e^expression

    INT(<numeric-expression>)
       returns the integer-value of the expression. For example 5.8 will be converted to 5.

    LEFT$(<string-expression>,<numeric-expression>)
        returns the first numeric-expression characters from the left side of the string

    LEN(<string-expression>)
       returns the length of the string

    LOG(<numeric-expression>)
        returns the natural logarithm of the expression.

    MID$(<string-expression>,<numeric-expression1>[,<numeric-expression2>])
        returns the string from position numeric-expression1. If a 3rd value is given, the result is limited to this
        number of characters

    RIGHT$(<string-expression>,<numeric-expression>)
        returns the first numeric-expression characters from the right side of the string

    RND()
        returns a random value that is >=0 and >1

    SGN(<numeric-expression>)
        returns the sign of the expression. Possible results are 1, 0 and -1

    SIN(<numeric-expression>)
        returns the sinus-value of the expression

    SQR(<numeric-expression>)
        returns the squareroot-value of the expression

    STR$(<numeric-expression>)
        returns the expression as a string

    TAN(<numeric-expression>)
        returns the tangens-value of the expression

    VAL(<string-expression>)
        converts the string to number. If that is not possible, 0 is returned

Commands:
    CHDIR <path>
        Change the current disc directory

    CLOSE #<file-number>
        Close a file

    CLR
        Clear all variables

    CLS
        Clear Screen

    COLOR <index>, <color>
        Set a system text-color (0-15) to index 0 (background) or 1 (foreground)

    CONT
        Continues a program after STOP or an user-interrupt by Ctrl-C

    DATA <value-1>[,value-2[,...]]
        Provides data for the READ statement. Only literal values are allowed

    DIM <variable>(<dimension-1>[,<dimension-2[,...]])
        Set the maximum size of an array. DIM will be called automaticly with default
        values 10, if an array variable is first used without DIM

    DIR [<mask>]
        List the content of the current directory. Mask may contain * as a wildcard

    EDIT <line-number>
        Edit an existing line

    END
        Stop program execution

    FOR <variable> = <start-value> TO <end-value> [STEP <step-width] : NEXT [<variable>]
        Loops over the area between FOR and NEXT statement, assigning variable values in the
        given range. Default for step is 1. The variable parameter at next is optional, if set
        it has to match the last FOR variable

    GET <variable>
        Put next character from keybord buffer to the variable. If the buffer is empty
        variable will be assigned an empty string

    GET #<file-number>
        Put next character from an open file to the variable. If the buffer is empty
        variable will be assigned an empty string

    GOSUB <line-number>
        Jump to a subroutine in the given line. Line-number has to be an integer literal.
        After reaching a RETURN-statement, execution continues after this statement

    GOTO <line-number>
        Jump to the given line. Line-number has to be an integer literal

    IF <expression> [THEN <statement>|GOTO <line-number>]
        If the expression evaluates to not 0 or empty string the statement is executed or the
        program jumps to the given line-number

    INPUT [<text>,] <variable1>[,<variable2>[,...]]]
        If a text is given as a string literal it will be printed. Every variable will be asked from the
        user to put in from the keyboard.

    INPUT #<file-number>, <variable1>[,<variable2>[,...]]]
        Evere variable will be filled with the content of the next line in the given file

    KILL <file>
        Remove a file on disc

    LET <variable> = <value>
        Assign value to the variable. The word LET is optional

    LIST [<line-number>]|[[<start-line>] - [<target-line>]]
        List the whole program, one given line or a range of lines, where start and target are optional

    LOAD <filename>
        Loads the content of the file to the program memory. The current program will be deleted

    MKDIR <path>
        Create a directory on disc

    NEW
        Clear program

    ON <expression> [GOTO|GOSUB] <line-number1>[,<line-number2>[,...]]
        Jumps to or calls a subroutine at the line-number corresponding to the evaluated value.
        1 is corresponding to the first line. If there is no match, no jump is executed

    OPEN #<file-number>,<file-name>[,<file-mode>]
        Opens the given file and assigns a file number. Valid modes are
        R (default) for read, W for write and A for append

    PRINT <expressionlist> [,|;]
        Prints a list of expressions to the screen. Expressions are seperated by , (space) or ; (no space)
        At the end is printed a linefeed, if the is no , or ;
        As a special expression @<x>,<y> will move the cursor to line y and column x, starting with 1

    PRINT #<file-number>, <expressionlist>
        Prints the list of expression to the given file. Expressions are seperated by , (space) or ; (no space)
        At the end is printed a linefeed, if the is no , or ;

    QUIT
        Quits JuniorBASIC interpreter

    READ <variable>
        Get the next DATA value and put it to variable

    REM [<comment>]
        ignore the rest of the line, including :

    RENUMBER [<new-start>[,<new-step>[,<old-start>]]]
        Assign new line numbers to a part of the program

    RESTORE
        Reset the data pointer for the READ command

    RETURN
        Return from a subroutine

    RMDIR <path>
        Remove a directory on disc

    RUN [<line-number> | <filename>]
        Starts a program. The line, where to start may be given. A filename may be given, then the
        corresponding program is loaded and executed immediately

    SAVE <filename>
        Saves the current program to the given file

    SLEEP <seconds>
        Wait for the given time

    SOUND <frequency>, <seconds>
        Play a sound for the given time

    STOP
        Stops the program execution. The execution may be continued with CONT